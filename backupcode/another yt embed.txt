"use client"
import React, { useEffect } from "react";

declare global {
  interface Window {
    onYouTubeIframeAPIReady?: () => void;
    YT?: any;
  }
}

const YouTubeEmbed: React.FC<{ videoId: string }> = ({ videoId }) => {
  useEffect(() => {
    const loadYouTubeAPI = () => {
      if (window.YT && typeof window.YT.Player !== "undefined") {
        // If the YouTube API is already loaded, execute onYouTubeIframeAPIReady immediately
        onYouTubeIframeAPIReady();
      } else {
        // Otherwise, load the YouTube API script
        const tag = document.createElement("script");
        tag.src = "https://www.youtube.com/iframe_api";
        const firstScriptTag = document.getElementsByTagName("script")[0];
        firstScriptTag.parentNode!.insertBefore(tag, firstScriptTag);

        // Assign onYouTubeIframeAPIReady to the window object
        window.onYouTubeIframeAPIReady = onYouTubeIframeAPIReady;
      }
    };

    const onYouTubeIframeAPIReady = () => {
      const player = new window.YT.Player("player", {
        videoId: videoId,
        playerVars: {
          controls: 1,
          showinfo: 0,
          rel: 0,
          modestbranding: 1, // Hide video title and uploader information at start
          iv_load_policy: 3,
        },
        events: {
          onReady: onPlayerReady,
        },
      });
    };

    const onPlayerReady = (event: any) => {
      event.target.mute();
      event.target.setPlaybackQuality("hd720");
      event.target.pauseVideo();
      const titleElement = document.querySelector(".ytp-title");
      if (titleElement instanceof HTMLElement) {
        titleElement.style.display = "none";
      }

      // Fast reload by re-assigning the videoId
      const videoId = event.target.getVideoData().videoId;
      event.target.cueVideoById(videoId);
      // event.target.playVideo();

      // do not display video suggestion when paused
  event.target.addEventListener("onStateChange", (event: any) => {
  if (event.data === window.YT.PlayerState.PLAYING) {
    event.target.setOption("modestbranding", 0);
    event.target.setOption("showinfo", 0);
  } else if (event.data === window.YT.PlayerState.PAUSED) {
    event.target.setOption("modestbranding", 1);
    event.target.setOption("showinfo", 1);
  }
});


    };

    loadYouTubeAPI();
  }, [videoId]);

  return <div className="flex flex-col items-center mx-auto" id="player"></div>;
};

export default YouTubeEmbed;
